name: BuildRelease

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
   - cron: '0 */4 * * *'

defaults:
  run:
    working-directory: src

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@master
    - name: Get Atmosphere Latest Release
      id: latest_version
      uses: abatilo/release-info-action@v1.3.3
      with:
        owner: Atmosphere-NX
        repo: Atmosphere

    - uses: actions/checkout@master
    - name: Get Latest Release
      id: my_latest_version
      uses: abatilo/release-info-action@v1.3.3
      with:
        owner: kkkkyue
        repo: DeepSea

    - uses: actions/checkout@v2
    - id: set-version
      run: |
        version=$(python -c 'import sys, json; f=open("./settings.json");print(json.loads(f.read())["releaseVersion"])')
        echo "::set-output name=version::$version"
        
    - name: Set up Python 3.9
      uses: actions/setup-python@v1
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        if [ -f ../requirements.txt ]; then pip3 install -r ../requirements.txt; fi
        
    - name: Create DeepSea Packages
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: | 
        python ./start.py -gt="$GITHUB_TOKEN"

    - name: Create Release
      run: |
        set -x
        assets=()
        for asset in ./*.zip; do
          assets+=("-a" "$asset")
        done
        file_path="./repo_tags.txt"
        file_content=$(cat "$file_path")
        if [ ${{ steps.my_latest_version.outputs.latest_tag }} = v${{ steps.latest_version.outputs.latest_tag }} ]; then 
           hub release delete ${{ steps.my_latest_version.outputs.latest_tag }};
        fi
        
        if [ ${{ steps.latest_version.outputs.latest_tag }} != vnull ]; then 
           hub release create -m "$file_content" "${assets[@]}" "v${{ steps.latest_version.outputs.latest_tag }}";
        fi
        
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    
    - name: baidupcs
      run: |
        wget https://github.com/qjfoidnh/BaiduPCS-Go/releases/download/v3.9.1/BaiduPCS-Go-v3.9.1-linux-amd64.zip
        unzip ./BaiduPCS-Go-v3.9.1-linux-amd64.zip
        rm -rf ./BaiduPCS-Go-v3.9.1-linux-amd64.zip
        ./BaiduPCS-Go-v3.9.1-linux-amd64/BaiduPCS-Go update
        ./BaiduPCS-Go-v3.9.1-linux-amd64/BaiduPCS-Go login -bduss=$BDUSS
        assets2=()
        for asset in ./*deepsea*.zip; do
          assets2+=("$asset")
        done
        ./BaiduPCS-Go-v3.9.1-linux-amd64/BaiduPCS-Go rm /NS/deepsea/*
        ./BaiduPCS-Go-v3.9.1-linux-amd64/BaiduPCS-Go u "${assets2[@]}" /NS/deepsea
      env:
        BDUSS: ${{ secrets.BDUSS }}
